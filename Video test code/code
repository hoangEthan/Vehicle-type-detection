pip install ultralytics opencv-python opencv-python-headless

import os
from ultralytics import YOLO
import cv2

# Directory and file setup
VIDEOS_DIR = os.path.join('.')    # test video path
video_path = os.path.join(VIDEOS_DIR, 'Test 7.mp4')
video_path_out = f"{video_path}_out.mp4"

if not os.path.exists(video_path):
    raise FileNotFoundError(f"Video not found at {video_path}")

model_path = os.path.join('.', 'train_v2', 'weights1', 'last.pt')     # path to trained weight
if not os.path.exists(model_path):
    raise FileNotFoundError(f"Model weights not found at {model_path}")

# Video capture
cap = cv2.VideoCapture(video_path)
ret, frame = cap.read()
if not ret:
    raise RuntimeError("Failed to read video file")

H, W, _ = frame.shape
out = cv2.VideoWriter(video_path_out, cv2.VideoWriter_fourcc(*'XVID'), int(cap.get(cv2.CAP_PROP_FPS)), (W, H))

# Load model
model = YOLO(model_path)  # load a custom model
threshold = 0.5

while ret:
    # Run inference
    results = model(frame)

    # Iterate over the detections (results is a list)
    for result in results:
        # Get the bounding boxes and other data
        for box in result.boxes:
            x1, y1, x2, y2 = box.xyxy[0]  # Coordinates
            score = box.conf[0]          # Confidence score
            class_id = int(box.cls[0])   # Class ID

            if score > threshold:
                # Draw the bounding box and label
                cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 4)
                cv2.putText(frame, result.names[class_id].upper(), (int(x1), int(y1 - 10)),
                            cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)

    # Write the processed frame
    out.write(frame)
    ret, frame = cap.read()
